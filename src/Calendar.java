import java.awt.Color;
import java.io.IOException;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;
import org.apache.xmlrpc.XmlRpcException;
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;

import org.apache.xmlrpc.common.TypeConverterFactoryImpl;
import org.apache.xmlrpc.server.PropertyHandlerMapping;
import org.apache.xmlrpc.server.XmlRpcServer;
import org.apache.xmlrpc.server.XmlRpcServerConfigImpl;
import org.apache.xmlrpc.webserver.WebServer;

public class Calendar extends javax.swing.JFrame{

    private WebServer webServer;
    XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
    XmlRpcClient client = new XmlRpcClient();

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    Statement stmt = null;
    
    private String myAddress = "http://127.0.0.1:8000/";
    private String serverAddress = "http://127.0.0.1:8001/";
    private String myIP;
    private String serverIP;
    private int myPort = 8000;
    private int serverPort = 8001;
    private ArrayList<String> addressList;    
    private boolean signedIn = false;
    private int max_id = 0;  
    private int MAX_ROWS = 1000;

    private int myID;    
    public String nextAddress;
    private TokenThread th1;
    private boolean hasTkn = false;
    public int cs = 0;
    private ArrayList<functionValues> funcList = new ArrayList<functionValues>();
    private ArrayList<String> signInQueue = new ArrayList<String>();
    private boolean waitingToSignOut = false;
    public long sleepTime= 1000;
    public long sleepTimeRA= 200;
    private int localClock = 0;
    private int highClock = 0;
    private ArrayList<String> queue = new ArrayList<String>();
    private boolean requestCS = false;
    private HashSet<String> resourcesAccessing = new HashSet<String>(64);
    private HashSet<String> resourcesWant2Access = new HashSet<String>(64);
    private int numRepliesReq;
    public int numRepliesRecived;    
    
    public ImageIcon flag = new ImageIcon(getClass().getResource("flag.png"));
    public ImageIcon hourglass = new ImageIcon(getClass().getResource("hourglass.jpg"));    
    private boolean signedOut = true;    
    public int algorithm = 0;
    /**
     * Creates new form Calendar
     * @throws java.io.IOException
     */
    public Calendar() {
        initComponents();
    }
    public Calendar(String myAdd,String srvAdd) {
        initComponents();
        this.jPanelRA.setVisible(false);
        
        setAddress(myAdd,srvAdd);

        this.addressList = new ArrayList<String>();
        this.setSignedInStatus(false);
        
        conn = sqlConnect.connectDB();    
        initTableData();
        updateTable();
        
        try {
            initServer(); // initialize XmlRPC server
        } catch (IOException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbData = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtfID = new javax.swing.JTextField();
        jtfDate = new javax.swing.JTextField();
        jtfTime = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jtfDuration = new javax.swing.JTextField();
        jtfHeader = new javax.swing.JTextField();
        jtfComment = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jbtAdd = new javax.swing.JButton();
        jbtEdit = new javax.swing.JButton();
        jbtDel = new javax.swing.JButton();
        jbtClear = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jlbMyIP = new javax.swing.JLabel();
        jlbSrvIP = new javax.swing.JLabel();
        jbtSetHostIP = new javax.swing.JButton();
        jbtSetServer = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlbStatus = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jlbNumComp = new javax.swing.JLabel();
        jbtSignIn = new javax.swing.JButton();
        jbtSignOut = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jrb1 = new javax.swing.JRadioButton();
        jrb2 = new javax.swing.JRadioButton();
        jPanel10 = new javax.swing.JPanel();
        jPanelTR = new javax.swing.JPanel();
        jlbImage1 = new javax.swing.JLabel();
        jPanelRA = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jlbLocalClock = new javax.swing.JLabel();
        jlbHighestClock = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlsAddList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                customExit(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 151));

        jtbData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Date", "Time", "Duration", "Header", "Comment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbData.setFocusable(false);
        jtbData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbDataMouseClicked(evt);
            }
        });
        jtbData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtbDataKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jtbData);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Add / Edit / Delete"));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ID");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Date");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Time");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jtfDate, org.jdesktop.beansbinding.ObjectProperty.create(), jtfID, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jtfTime, org.jdesktop.beansbinding.ObjectProperty.create(), jtfDate, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jtfDuration, org.jdesktop.beansbinding.ObjectProperty.create(), jtfTime, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Duration");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Header");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Comment");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jtfHeader, org.jdesktop.beansbinding.ObjectProperty.create(), jtfDuration, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jtfComment, org.jdesktop.beansbinding.ObjectProperty.create(), jtfHeader, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jbtAdd, org.jdesktop.beansbinding.ObjectProperty.create(), jtfComment, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        jbtAdd.setText("Add");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jbtEdit, org.jdesktop.beansbinding.ObjectProperty.create(), jbtAdd, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        jbtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAddActionPerformed(evt);
            }
        });

        jbtEdit.setText("Edit");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jbtDel, org.jdesktop.beansbinding.ObjectProperty.create(), jbtEdit, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        jbtEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtEditActionPerformed(evt);
            }
        });

        jbtDel.setText("Delete");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jbtClear, org.jdesktop.beansbinding.ObjectProperty.create(), jbtDel, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        jbtDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtDelActionPerformed(evt);
            }
        });

        jbtClear.setText("Clear");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jbtSignIn, org.jdesktop.beansbinding.ObjectProperty.create(), jbtClear, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        jbtClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtAdd)
                    .addComponent(jbtEdit)
                    .addComponent(jbtDel)
                    .addComponent(jbtClear))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbtAdd, jbtClear, jbtDel, jbtEdit});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jbtAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtDel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtClear)
                .addGap(0, 7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jtfTime)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jtfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfID, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jtfComment, jtfDate, jtfDuration, jtfHeader, jtfID, jtfTime});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel5, jLabel6});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel7, jLabel8, jLabel9});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jtfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel5))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jtfTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel2, jScrollPane2});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("IP Address"));

        jLabel4.setText("Connect:");

        jLabel3.setText("Host:");

        jlbMyIP.setText("-");

        jlbSrvIP.setText("-");

        jbtSetHostIP.setText("Host");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jbtSetServer, org.jdesktop.beansbinding.ObjectProperty.create(), jbtSetHostIP, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        jbtSetHostIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSetHostIPActionPerformed(evt);
            }
        });

        jbtSetServer.setText("Connect");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jtfID, org.jdesktop.beansbinding.ObjectProperty.create(), jbtSetServer, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        jbtSetServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSetServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbSrvIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jbtSetHostIP)
                        .addGap(20, 20, 20)
                        .addComponent(jbtSetServer)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbMyIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbtSetHostIP, jbtSetServer});

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel3, jLabel4});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbMyIP)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jlbSrvIP, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtSetHostIP)
                    .addComponent(jbtSetServer))
                .addContainerGap())
        );

        jlbStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlbStatus.setText("Offline");

        jLabel2.setText("# Hosts");

        jlbNumComp.setText("-");

        jbtSignIn.setText("Sign In");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jbtSignOut, org.jdesktop.beansbinding.ObjectProperty.create(), jbtSignIn, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        jbtSignIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSignInActionPerformed(evt);
            }
        });

        jbtSignOut.setText("Sign Out");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jbtSetHostIP, org.jdesktop.beansbinding.ObjectProperty.create(), jbtSignOut, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        jbtSignOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSignOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtSignOut)
                    .addComponent(jbtSignIn))
                .addGap(26, 26, 26)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlbStatus)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbNumComp, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(52, 52, 52))
        );

        jPanel9Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbtSignIn, jbtSignOut});

        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbStatus)
                    .addComponent(jbtSignIn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jlbNumComp)
                    .addComponent(jbtSignOut))
                .addGap(5, 5, 5))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Algorithm"));

        buttonGroup1.add(jrb1);
        jrb1.setSelected(true);
        jrb1.setText("Token Ring");
        jrb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jrb2);
        jrb2.setText("R & A");
        jrb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrb2)
                    .addComponent(jrb1))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jrb1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jrb2))
        );

        jPanel10.setPreferredSize(new java.awt.Dimension(124, 51));

        jlbImage1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flag.png"))); // NOI18N

        javax.swing.GroupLayout jPanelTRLayout = new javax.swing.GroupLayout(jPanelTR);
        jPanelTR.setLayout(jPanelTRLayout);
        jPanelTRLayout.setHorizontalGroup(
            jPanelTRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTRLayout.createSequentialGroup()
                .addGap(0, 18, Short.MAX_VALUE)
                .addComponent(jlbImage1))
        );
        jPanelTRLayout.setVerticalGroup(
            jPanelTRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTRLayout.createSequentialGroup()
                .addComponent(jlbImage1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jLabel11.setText("Local Clock:");

        jLabel12.setText("High Clock:");

        jlbLocalClock.setText("-");

        jlbHighestClock.setText("-");

        javax.swing.GroupLayout jPanelRALayout = new javax.swing.GroupLayout(jPanelRA);
        jPanelRA.setLayout(jPanelRALayout);
        jPanelRALayout.setHorizontalGroup(
            jPanelRALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRALayout.createSequentialGroup()
                .addGroup(jPanelRALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelRALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlbLocalClock, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbHighestClock, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelRALayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jlbHighestClock, jlbLocalClock});

        jPanelRALayout.setVerticalGroup(
            jPanelRALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRALayout.createSequentialGroup()
                .addGroup(jPanelRALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jlbLocalClock))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelRALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlbHighestClock))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanelTR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelRA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                .addComponent(jPanelTR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanelRA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel10.setText("List of Hosts in Network");

        jScrollPane1.setViewportView(jlsAddList);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtSignInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSignInActionPerformed

        try {
            startServer(); // start listening for connections
        } catch (IOException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        } 
        this.clearQueuedFunc();
        this.resetQueue();
        if(serverAddress.length() > 10)
            algorithm = this.getAlgorithm();
        if(algorithm == 0){ // Token Ring
            createTokenThread();
            stopTokenPassing();          
            setWaitToSignOut(false);
            if(serverAddress.length() < 1 || myAddress.equalsIgnoreCase(serverAddress)){
                Object[] a = new Object[]{new String(myAddress)};
                updateAddressList(a); // update list of hosts in display
                generateIDnextAddress();
                signedOut = false;
                setTokenStatus(true);   
                signIn(true);
            }
            else{
                requestSignIn();
            }          
        }
        else{ // R&A
            localClock = 0;
            highClock = 0;
            resetQueue();
            updateRAdisplay();
            if(serverAddress.length() < 1 || myAddress.equalsIgnoreCase(serverAddress)){
                Object[] a = new Object[]{new String(myAddress)};
                updateAddressList(a); // update list of hosts in display
                signedOut = false;
                signIn(true);
            }
            else{
                signedOut = false;
                signIn(false);
            }              
        }        
        
    }//GEN-LAST:event_jbtSignInActionPerformed
    public void signIn(boolean oneComp){

        Object[] ret = null;
        Object[] tbl = null;
        if(oneComp == false)
            try {
                config.setServerURL(new URL(addHttp(serverAddress)));
                client.setConfig(config);

                Object[] params = new Object[]{new String(myAddress)};
                // get address list of hosts in the network
                ret = (Object[]) client.execute("handler1.get_clients", params);

                updateAddressList(ret); // update list of hosts in display
                
                if(algorithm == 0)
                    generateIDnextAddress();

                // sign in to each host on the network
                for(String s:addressList){
                    if(s.equalsIgnoreCase(myAddress))
                    continue;
                    config.setServerURL(new URL(addHttp(s)));
                    client.setConfig(config);
                    params = new Object[]{new String(myAddress)};
                    try {
                        int retval = (Integer) client.execute("handler1.signin", params);
                    } catch (Exception exception) {
                        System.err.println("Couldn't sign in: JavaServer: " + exception);
                        //                    JOptionPane.showMessageDialog(null, "Can not Sign In to IP "+s,"Sign In Error", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                }
                // get table data
                config.setServerURL(new URL(addHttp(serverAddress)));
                client.setConfig(config);
                params = new Object[]{new String(myAddress)};
                tbl = (Object[]) client.execute("handler1.getTableData", params);
                updateTableFromNetwork(tbl); // update appointments in table  
                
                if(algorithm == 0){
                    // tell connect host to start token passing            
                    config.setServerURL(new URL(addHttp(serverAddress)));
                    client.setConfig(config);
                    params = new Object[]{new String(myAddress)};
                    client.execute("handler1.startTokenPassing", params);          
                }

            } catch (Exception exception) {
                System.err.println("JavaServer: " + exception);
            }

        if(ret == null && oneComp == false){
            JOptionPane.showMessageDialog(null, "Server not found.", "Login Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        signedOut = false;
        this.setSignedInStatus(true);
        // host starts token passing
        if(oneComp == false){
            if(algorithm == 0)
                startTokenPassing();
        }            
    }
    
    // request connect IP for signIn to network
    private void requestSignIn(){
        try {
            Object[] params = new Object[]{new String(myAddress)};
            // tell connect host to start token passing
            config.setServerURL(new URL(addHttp(serverAddress)));
            client.setConfig(config);
            params = new Object[]{new String(myAddress)};            
            client.execute("handler1.requestClientSignIn", params);
        } catch (MalformedURLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XmlRpcException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void signOutNetwork(){
        try {
            Object[] params = new Object[]{new String(myAddress)};
            for(String s:addressList){
                if(s.equalsIgnoreCase(myAddress))
                    continue;                
                config.setServerURL(new URL(addHttp(s))); 
                client.setConfig(config);   
                try {
                    int retval = (Integer) client.execute("handler1.sign_off", params);
                 } catch (Exception exception) {
                    System.err.println("JavaServer: " + exception);
//                    JOptionPane.showMessageDialog(null, "Can not Sign Out from IP "+s,"Error", JOptionPane.ERROR_MESSAGE);                    
                    continue;
                }                     
            }
            this.clearAddressList();
            updateAddressList(null); // update list of hosts in display   
            this.setSignedInStatus(false);                        
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);
        }              
     
        if(algorithm == 0){
            stopTokenPassing();
            setTokenStatus(false); 
            setSignedInStatus(false);
        }        
        try {
            stopServer(); // Stop the XmlRPC server
        } catch (IOException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }           
    }    
    // Signs out host from the network
    public void signMeOut(){
        if(algorithm == 0){ // Token Ring        
            if(addressList.size() == 1){ //only current host is online
                updateAddressList(null);
                clearAddressList();
                setTokenStatus(false);    
                signedOut = true;
                this.setSignedInStatus(false);                
                try {
                    stopServer(); // Stop the XmlRPC server
                } catch (IOException ex) {
                    Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
                }            
            }   
            else if(hasToken() == true){
                this.holdToken();
                String t = nextAddress;
                this.signOutNetwork();
                this.sendToken(t);
                setWaitToSignOut(false);            
            }
            else{
                setWaitToSignOut(true);
            }
        }
        else { //R&A    
            if(addressList.size() == 1){ //only current host is online
                updateAddressList(null);
                signedOut = true;
                this.setSignedInStatus(false);
                clearAddressList();    
                try {
                    stopServer(); // Stop the XmlRPC server
                } catch (IOException ex) {
                    Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
                }            
            }   
            else {
                signedOut = true;
                this.signOutNetwork();     
                this.setSignedInStatus(false);
            }         
        }
    }    
    
    private void jbtSignOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSignOutActionPerformed
        signMeOut();
    }//GEN-LAST:event_jbtSignOutActionPerformed

    // sets the IP addrees of the host to initially connect to
    // this is provided by 2nd command line argument
    // this button gives option to change it while program is running
    private void jbtSetServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSetServerActionPerformed
        String disp = "";
        if(serverAddress.length() > 9){ // no proper check if IP is valid
            disp = serverIP+":"+serverPort;
        }
        else disp = "192.168.0.100:8000"; //myIP+":"+myPort;
        String input =  JOptionPane.showInputDialog(this 
               ,"Enter new Connect Address:",disp);
        if(input != null) {
            if(input.equals(myIP+":"+myPort))                
                JOptionPane.showMessageDialog(null, "Connect IP cannot be own IP.", "IP Error", JOptionPane.ERROR_MESSAGE);
            else
                this.setAddress(""+myIP+":"+myPort, input);
        }
    }//GEN-LAST:event_jbtSetServerActionPerformed

    // Signs out client when window title bar 'X' button is clicked
    private void customExit(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_customExit
        signMeOut();        
        System.exit(0);      
    }//GEN-LAST:event_customExit

    private void jbtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAddActionPerformed
        if(this.jtfID.getText().length()>0) {
            JOptionPane.showMessageDialog(null, "ID field must be empty when adding.",
                        "Add Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String date = this.jtfDate.getText();
        String time = this.jtfTime.getText();
        String duration = this.jtfDuration.getText();
        String header = this.jtfHeader.getText();
        String comment = this.jtfComment.getText();  
        if(date.length()==0){
            JOptionPane.showMessageDialog(null, "Date must be given.",
                        "Add Error", JOptionPane.ERROR_MESSAGE);
            return;            
        }    
        if(time.length()==0){
            JOptionPane.showMessageDialog(null, "Time must be given.",
                        "Add Error", JOptionPane.ERROR_MESSAGE);
            return;            
        }            
        
        if(this.addressList.size() == 1){
            performFunction(1,-1,date,time,duration,header,comment);
            return;
        }        
        
        if(algorithm == 0){ // Token Ring
            if(this.hasToken() == true){
                queueFunc(1,-1,date,time,duration,header,comment);
            }
            else{
                queueFunc(1,-1,date,time,duration,header,comment);
            }
        }        
        else { // R&A
            queueFunc(1,-1,date,time,duration,header,comment);
            if(requestCS == true) return;
            requestCS = true;
            localClock = highClock + 1;
            numRepliesReq = this.addressList.size() - 1;
            numRepliesRecived = 0;
            sendCsRequest("*");            
        }
    }//GEN-LAST:event_jbtAddActionPerformed

    private void jbtDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtDelActionPerformed
        String st = this.jtfID.getText();        
        if(st.length()<1){
            JOptionPane.showMessageDialog(null, "ID must be given.",
                        "Delete Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(!st.matches("\\d*\\.?\\d+")) return;
        int id = Integer.parseInt(st);
        
        if(this.addressList.size() == 1){
            performFunction(2,id,"","","","","");
            return;
        }        
        
        if(algorithm == 0){ // Token Ring
            if(this.hasToken() == true){
                queueFunc(2,id,"","","","","");
            }
            else{
                queueFunc(2,id,"","","","","");
                System.out.println("Del queued");
            }
        }        
        else {
            queueFunc(2,id,"","","","","");
            if(requestCS == true) return;
            requestCS = true;
            localClock = highClock + 1;
            numRepliesReq = this.addressList.size() - 1;
            numRepliesRecived = 0;
            sendCsRequest(String.valueOf(id));            
        }        
    }//GEN-LAST:event_jbtDelActionPerformed

    private void jbtClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtClearActionPerformed
        this.jtfID.setText("");
        this.jtfDate.setText("");        
        this.jtfTime.setText("");
        this.jtfDuration.setText("");        
        this.jtfHeader.setText("");
        this.jtfComment.setText("");     
    }//GEN-LAST:event_jbtClearActionPerformed

    private void jbtEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtEditActionPerformed
        String st = this.jtfID.getText();
        if(st.length()<1){
            JOptionPane.showMessageDialog(null, "ID must be given.",
                        "Edit Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(!st.matches("\\d*\\.?\\d+")) return;

        int id = Integer.parseInt(st);
        String date = this.jtfDate.getText();
        String time = this.jtfTime.getText();
        String duration = this.jtfDuration.getText();
        String header = this.jtfHeader.getText();
        String comment = this.jtfComment.getText();    
        if(date.length()==0 && time.length()==0 && duration.length()==0 
                && header.length()==0 && comment.length()==0){
            JOptionPane.showMessageDialog(null, "At least one field must be given.",
                        "Edit Error", JOptionPane.ERROR_MESSAGE);
            return;            
        }
        
        /* @todo uncomment
        if(this.addressList.size() == 1){
            performFunction(3,id,date,time,duration,header,comment);
            return;
        }*/        
        
        if(algorithm == 0){ // Token Ring
            if(this.hasToken() == true){
                queueFunc(3,id,date,time,duration,header,comment);
            }
            else{
                queueFunc(3,id,date,time,duration,header,comment);
                System.out.println("Edit queued");
            }
        }        
        else {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, "In edit");
            sendCsRequest(String.valueOf(id));
            this.waitReplies();
            this.executeAll(String.valueOf(id), 3, id, date, time, duration, header, comment);
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, "Perfomed edit");
        }
    }//GEN-LAST:event_jbtEditActionPerformed
    
    private void waitReplies(){
        while(this.numRepliesRecived != this.numRepliesReq){
                System.out.println("waiting "+ this.numRepliesReq);
                delay(100);
            }
    }
    
    private void jbtSetHostIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSetHostIPActionPerformed
        String disp = "";
        if(myAddress.length() > 9){ // no proper check if IP is valid
            disp = myAddress; //serverIP+":"+serverPort;
        }
        else disp = "127.0.0.1:8001"; //myIP+":"+myPort;
        String input =  JOptionPane.showInputDialog(this 
               ,"Enter new Host Address:",disp);
        if(input != null) {
            this.setAddress(input, serverAddress);
            clearAddressList(); 
            try {
                initServer();
            } catch (IOException ex) {
                Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
                System.err.println("cannot init server.");
            }
        }
    }//GEN-LAST:event_jbtSetHostIPActionPerformed

    private void jtbDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbDataMouseClicked
        updateTextFields();
    }//GEN-LAST:event_jtbDataMouseClicked

    private void jtbDataKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtbDataKeyReleased
        updateTextFields();
    }//GEN-LAST:event_jtbDataKeyReleased

    private void jrb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrb1ActionPerformed
        this.jPanelRA.setVisible(false);
        this.jPanelTR.setVisible(true);
        algorithm = 0;        
    }//GEN-LAST:event_jrb1ActionPerformed

    private void jrb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrb2ActionPerformed
        this.jPanelTR.setVisible(false);      
        this.jPanelRA.setVisible(true);
        algorithm = 1;
    }//GEN-LAST:event_jrb2ActionPerformed

    private void updateTextFields(){
        int row = this.jtbData.getSelectedRow();
        String id = "", date = "", time = "", duration = "", header = "", comment = "";
        if(this.jtbData.getValueAt(row,0) != null) id = this.jtbData.getValueAt(row,0).toString();
        if(this.jtbData.getValueAt(row,1) != null) date = this.jtbData.getValueAt(row,1).toString();
        if(this.jtbData.getValueAt(row,2) != null) time = this.jtbData.getValueAt(row,2).toString();
        if(this.jtbData.getValueAt(row,3) != null) duration = this.jtbData.getValueAt(row,3).toString();
        if(this.jtbData.getValueAt(row,4) != null) header = this.jtbData.getValueAt(row,4).toString();
        if(this.jtbData.getValueAt(row,5) != null) comment = this.jtbData.getValueAt(row,5).toString();

        this.jtfID.setText(id);
        this.jtfDate.setText(date);
        this.jtfTime.setText(time);
        this.jtfDuration.setText(duration);
        this.jtfHeader.setText(header);
        this.jtfComment.setText(comment);        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new Calendar().setVisible(true);

                }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelRA;
    private javax.swing.JPanel jPanelTR;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtAdd;
    private javax.swing.JButton jbtClear;
    private javax.swing.JButton jbtDel;
    private javax.swing.JButton jbtEdit;
    private javax.swing.JButton jbtSetHostIP;
    private javax.swing.JButton jbtSetServer;
    private javax.swing.JButton jbtSignIn;
    private javax.swing.JButton jbtSignOut;
    private javax.swing.JLabel jlbHighestClock;
    private javax.swing.JLabel jlbImage1;
    private javax.swing.JLabel jlbLocalClock;
    private javax.swing.JLabel jlbMyIP;
    private javax.swing.JLabel jlbNumComp;
    private javax.swing.JLabel jlbSrvIP;
    private javax.swing.JLabel jlbStatus;
    private javax.swing.JList jlsAddList;
    private javax.swing.JRadioButton jrb1;
    private javax.swing.JRadioButton jrb2;
    private javax.swing.JTable jtbData;
    private javax.swing.JTextField jtfComment;
    private javax.swing.JTextField jtfDate;
    private javax.swing.JTextField jtfDuration;
    private javax.swing.JTextField jtfHeader;
    private javax.swing.JTextField jtfID;
    private javax.swing.JTextField jtfTime;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void setSignedInStatus(boolean status){
        signedIn = status;
        this.jbtSignIn.setEnabled(!status);
        this.jbtSignOut.setEnabled(status);
        this.jbtAdd.setEnabled(status);
        this.jbtEdit.setEnabled(status);
        this.jbtDel.setEnabled(status);    
        this.jbtSetHostIP.setEnabled(!status);
        this.jbtSetServer.setEnabled(!status);
        if(serverAddress.length() < 1){
            this.jrb1.setEnabled(!status);
            this.jrb2.setEnabled(!status);        
        }      
        if(status == true){
            this.jlbStatus.setForeground(Color.BLUE);
            this.jlbStatus.setText("Online");
        }
        else {
            this.jlbStatus.setForeground(Color.black);
            this.jlbStatus.setText("Offline");
            this.jlbImage1.setIcon(null);
            this.jlbLocalClock.setText("-");
            this.jlbHighestClock.setText("-");        
        }      
    } 
    // parse the addresses received from command line to IP and port
    private void setAddress(String myAdd, String srvAdd){
        String myA = myAdd.split("\\:")[0];
        String myP = myAdd.split("\\:")[1];
        String srvA;
        String srvP;
        if(srvAdd.length() >10){
            srvA = srvAdd.split("\\:")[0];
            srvP = srvAdd.split("\\:")[1];
        }
        else{
            srvA = "";
            srvP = "";            
        }

        this.myAddress = myAdd; //"http://" + myAdd + "/";
        this.myIP = myA;
        this.myPort = Integer.parseInt(myP);
        if(srvAdd.length() > 10){
            this.serverAddress = srvAdd; //"http://" + srvAdd + "/";
            this.serverIP = srvA;
            this.serverPort = Integer.parseInt(srvP); 
            this.jrb1.setEnabled(false);
            this.jrb2.setEnabled(false);               
        }
        else {
            this.serverAddress = "";
            this.serverIP = "";
            this.serverPort = 0;          
            this.jrb1.setEnabled(true);
            this.jrb2.setEnabled(true);
        }
            
        this.jlbMyIP.setText(myAddress);
        if(srvAdd.length() > 10){
            this.jlbSrvIP.setText(serverAddress);
        }
        else {
            this.jlbSrvIP.setText("");           
        }
    }
    // initialize XmlRPC server
    private void initServer() throws IOException{
        webServer = new WebServer(myPort,InetAddress.getByName(myIP));
        XmlRpcServer xmlRpcServer = webServer.getXmlRpcServer();
        PropertyHandlerMapping phm = new PropertyHandlerMapping();
        try {
            phm.addHandler("handler1",XMLMethods.class);
        } catch (XmlRpcException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }

        xmlRpcServer.setHandlerMapping(phm);

        XmlRpcServerConfigImpl serverConfig =
            (XmlRpcServerConfigImpl) xmlRpcServer.getConfig();
        serverConfig.setEnabledForExtensions(true);
        serverConfig.setContentLengthOptional(false);        
    }
    // start XmlRPC server
    private void startServer() throws IOException {
        webServer.start();
    }
    // stop XmlRPC server
    private void stopServer() throws IOException {
        webServer.shutdown();
    }    
    // return address of hosts in network
    public String[] getAddressList(String address) {
        String[] tempList = new String[addressList.size()];
        int i = 0;
        for(String s: addressList){
            tempList[i++] = s;
        }
        return tempList;
    } 
    // update lists of hosts in display
    public void updateAddressList(Object[] obj){

        if(obj == null){
            this.jlsAddList.setListData(new String[0]);        
            this.jlbNumComp.setText("-");            
            return;
        }

        for(Object o:obj){
            String addr = o.toString();
            if(!addressList.contains(addr)){
                addressList.add(addr);                   
            }                                
        }
        if(!addressList.contains(myAddress)){
            addressList.add(myAddress);                   
        }        
        String[] tempList = new String[addressList.size()];
        int i = 0;
        for(String s:addressList)
            tempList[i++] = s;

        this.jlsAddList.setListData(tempList); // update display of listbox        
        this.jlbNumComp.setText(""+addressList.size());
    }
    // add a client IP to list of hosts when the client signs in to network
    public int signInClient(String address) {
        if(!addressList.contains(address)){
            addressList.add(address);
            this.jlbNumComp.setText(""+addressList.size());
        }

        String[] tempList = new String[addressList.size()];
        int i = 0;
        for(String s:addressList)
            tempList[i++] = s;     
        this.jlsAddList.setListData(tempList); // update display of listbox  
        
        if(algorithm == 0)
            generateIDnextAddress();        
        return 0;
    }
    // remove a client IP from the list of hosts when the client signs out from network
    public int signOutClient(String address) {
        if(addressList.contains(address)){
            addressList.remove(address);
            this.jlbNumComp.setText(""+addressList.size());
        }

        String[] tempList = new String[addressList.size()];
        int i = 0;
        for(String s:addressList)
            tempList[i++] = s;     
        this.jlsAddList.setListData(tempList); // update display of listbox 
        
        if(jrb1.isSelected() == true){
            generateIDnextAddress();
            if(addressList.size() == 1){
                holdToken();
            }
        }        
        return 0;
    }
    // initialize JTable
    private void initTableData() {
//        DefaultTableModel model = (DefaultTableModel) jtbData.getModel();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        jtbData.setDefaultRenderer(Integer.class, centerRenderer); 
        jtbData.setDefaultRenderer(String.class, centerRenderer);  
        jtbData.setColumnSelectionAllowed(false);        
        jtbData.setCellSelectionEnabled(false); 
        jtbData.setRowSelectionAllowed(true);
        jtbData.getTableHeader().setReorderingAllowed(false);
        
    }
    // update table display from database
    public void updateTable(){
        try {
            String sql = "select * from CalendarData";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            jtbData.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // add row to local database, returns the id generated
    public int addRow(String date, String time, String duration, String header, String comment) {

        try {
            String sql = "INSERT INTO CalendarData (date,time,duration,header,comment)"
                        + " VALUES ('" + date + "', '" + time + "', '"
                        + duration + "', '" + header + "','" + comment + "' )";

            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            stmt.executeUpdate(sql);     
            sql = "SELECT COALESCE(MAX(id),0) FROM CalendarData";
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            max_id = ((Number) rs.getObject(1)).intValue();
            stmt.close();
            conn.commit();
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }          
        return max_id;
    }    
    // add row received from client(with id) to local database
    public void addRowClient(int id,String date,String time, String duration,String header,String comment){
        try {
            conn.setAutoCommit(false);
            String sql = "INSERT INTO CalendarData (id,date,time,duration,header,comment)"
                    + " VALUES ('" + id + "', '" + date + "', '" + time + "', '"
                    + duration + "', '" + header + "','" + comment + "' )";
            stmt = conn.createStatement();
            stmt.executeUpdate(sql);           
            stmt.close();
            conn.commit();
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }                
    }
    // send a row to other hosts in network
    public void sendAddRow(int id, String date, String time, String duration, String header, String comment) {
       
        Object[] params = null;
        params = new Object[]{new String(date),new String(time),//new Integer(id),
                    new String(duration),new String(header),new String(comment)};
        try {           
            for(String s:addressList){
                if(s.equalsIgnoreCase(myAddress))
                    continue;
                config.setServerURL(new URL(addHttp(s))); 
                client.setConfig(config); 
                try {  
                    int retval = (Integer) client.execute("handler1.addRowClient", params);
                 } catch (Exception exception) {
                    System.err.println("JavaServer: " + exception);
//                    JOptionPane.showMessageDialog(null, "Host " + s + " not Found ","Add Error", JOptionPane.ERROR_MESSAGE);                      
                    continue;  
                 }
            }
            
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);
        }      
    }   
    // returns all data in table. (two dimensional array didn't seem to work)
    public String[] getTableData() {
        int id = 0;
        String date = null;
        String time = null;
        String duration = null;
        String header = null;
        String comment = null; 

        String[] params = null;
        
        try {         
            String sql = "select * from CalendarData";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
   
            String[][] dat = new String[MAX_ROWS][6];
            int count = 0;
            while(rs.next()){
                id = Integer.parseInt(rs.getObject(1).toString());
                date = rs.getObject(2).toString();
                time = rs.getObject(3).toString();
                duration = rs.getObject(4).toString();
                header = rs.getObject(5).toString();
                comment = rs.getObject(6).toString();
                dat[count][0] = ""+id;
                dat[count][1] = date;
                dat[count][2] = time;
                dat[count][3] = duration;
                dat[count][4] = header;
                dat[count][5] = comment;
                count++;
            } 
            
            params = new String[count*6];
            for(int i = 0; i < count; i++){
                for(int j = 0; j < 6; j++){
                    params[i*6+j] = dat[i][j];
                }                
            }
            return params;
        
        }catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }  
        return null;   
    } 
    // edits the fields
    public void editMyTable(int id, String date, String time, String duration, String header, String comment) {
//        String sql =
//            "UPDATE CalendarData " +
//            "SET date = ?, " +
//            "time = ?, " +
//            "duration = ?, " +
//            "header = ?, " +
//            "comment = ? " +                
//            "WHERE id = " + id;
//        
//        try {
//            conn.setAutoCommit(false);
//            pst  = conn.prepareStatement(sql);            
//            
//            pst.setString(1, date);
//            pst.setString(2, time);
//            pst.setString(3, duration);
//            pst.setString(4, header);               
//            pst.setString(5, comment);
// 
//            pst.executeUpdate();
//            pst.close();
//            conn.commit();            
//        } catch (SQLException ex) {
//            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
        try {
            if(date.length()>0){
                conn.setAutoCommit(false);
                String sql = "UPDATE CalendarData SET date = '" + date + "' WHERE ID = " + id;
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);      
                //rs = stmt.executeQuery(sql);
                stmt.close();
                conn.commit();
            }
            if(time.length()>0){
                conn.setAutoCommit(false);
                String sql = "UPDATE CalendarData SET time = '" + time + "' WHERE ID = " + id;
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);      
                //rs = stmt.executeQuery(sql);
                stmt.close();
                conn.commit();
            }
            if(duration.length()>0){
                conn.setAutoCommit(false);
                String sql = "UPDATE CalendarData SET duration = '" + duration + "' WHERE ID = " + id;
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);      
                //rs = stmt.executeQuery(sql);
                stmt.close();
                conn.commit();
            }
            if(header.length()>0){
                conn.setAutoCommit(false);
                String sql = "UPDATE CalendarData SET header = '" + header + "' WHERE ID = " + id;
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);      
                //rs = stmt.executeQuery(sql);
                stmt.close();
                conn.commit();
            }  
            if(comment.length()>0){
                conn.setAutoCommit(false);
                String sql = "UPDATE CalendarData SET comment = '" + comment + "' WHERE ID = " + id;
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);      
                //rs = stmt.executeQuery(sql);
                stmt.close();
                conn.commit();
            }             
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }     
    }    
    // update table data with network table data when signing in.
    // multiple row add not working with Java sqlite, have to add row by row
    private void updateTableFromNetwork(Object[] tbl) {
        int id;
        String date,time,duration,header,comment;
        deleteAllRow(); // delete all row from table
        String p = "";
        for(int i = 0; i < tbl.length/6; i++){
            id = Integer.parseInt(tbl[i*6].toString());
            date = tbl[i*6+1].toString();
            time = tbl[i*6+2].toString();
            duration = tbl[i*6+3].toString();
            header = tbl[i*6+4].toString();
            comment = tbl[i*6+5].toString();
            this.addRowClient(id, date, time, duration, header, comment);
        }
        updateTable(); // update display   
    }
    // delete all row from table
    public void deleteAllRow() {
        try {
            conn.setAutoCommit(false);
            String sql = "DELETE FROM " + "CalendarData";
            stmt = conn.createStatement();
            stmt.executeUpdate(sql);      
            conn.commit();
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }          
    }   
    // delete a single row from table
    public void delRowLocal(int id) {
        try {
            conn.setAutoCommit(false);
            String sql = "DELETE FROM CalendarData WHERE ID = " + id;
            stmt = conn.createStatement();
            stmt.executeUpdate(sql);      
            stmt.close();
            conn.commit();
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // send row id to delete to other hosts in network
    public void sendDelRowClient(int id) {
        Object[] params = null;
        String strID = ""+id;
        params = new Object[]{new String(strID)};
        try {           
            for(String s:addressList){
                if(s.equalsIgnoreCase(myAddress))
                    continue;
                config.setServerURL(new URL(addHttp(s))); 
                client.setConfig(config);
                try {
                    int retval = (Integer) client.execute("handler1.delRowClient", params);
                 } catch (Exception exception) {
                    System.err.println("JavaServer: " + exception);
//                    JOptionPane.showMessageDialog(null, "Host " + s + " not Found.","Delete Error", JOptionPane.ERROR_MESSAGE);                      
                    continue;    
                }                    
            }            
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);  
        }            
    }
    // send row to edit to other hosts in network
    public void sendEditClient(int id, String date, String time, String duration, String header, String comment){
        Object[] params = null;
        String strID = ""+id;
        params = new Object[]{new String(strID),new String(date),new String(time),
                    new String(duration),new String(header),new String(comment)};
        try {
            for(String s:addressList){
                if(s.equalsIgnoreCase(myAddress))
                    continue;
                config.setServerURL(new URL(addHttp(s))); 
                client.setConfig(config); 
                try {                  
                    int retval = (Integer) client.execute("handler1.editRowClient", params);
                 } catch (Exception exception) {
                    System.err.println("JavaServer: " + exception);
//                    JOptionPane.showMessageDialog(null, "Host " + s + " not Found ","Edit Error", JOptionPane.ERROR_MESSAGE);                      
                    continue;    
                }                
            }            
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);
        }    
    }

    public String addHttp(String s) {
        return "http://" + s + "/";
    }

    //#### ######## #### ######## ######## ####
    public void clearAddressList() {
        if(!addressList.isEmpty()) addressList.clear();
    }    
    
    public void generateIDnextAddress() {
        int count,nextIndex;
        myID = addressList.indexOf(myAddress);
        count = addressList.size();
        nextIndex = (myID+1) % count;
        nextAddress = addressList.get(nextIndex);        
    }
    
    public void createTokenThread(){
        th1 = new TokenThread();
    }
    
    public void startTokenPassing(){
        if(addressList.size() == 1) return;
        th1.startTokenPassing();
    }
    
    public void stopTokenPassing(){
        th1.holdToken();        
    }
    
    public void holdToken() {
        th1.holdToken();
    }   
    
    public void releaseToken() {
        setTokenStatus(false);
    }      

    public void tokenReceived() {
        setTokenStatus(true);
        holdToken();
        performQueuedFunc();
        performQueuedLogin();
        distributeFunc();
        clearQueuedFunc();

        if(isWaitingToSignOut() == true){
            String t = nextAddress;
            this.signOutNetwork();
            signedOut = true;
            this.sendToken(t);
            setWaitToSignOut(false);
            setSignedInStatus(false);            
            return;
        }
        delay((int) sleepTime);
        if(addressList.size() > 1) startTokenPassing();
    }
    
    public void setTokenStatus(boolean status){
        hasTkn = status;
        if(status == true){
            this.jlbImage1.setIcon(flag);             
        }
        else {          
            this.jlbImage1.setIcon(hourglass);         
        }             
    } 
    
    public boolean hasToken() {
        return hasTkn;
    }

    public void sendToken(String address) {
        this.releaseToken();
        try {
            config.setServerURL(new URL(addHttp(address))); 
            client.setConfig(config);   
            Object[] params = new Object[]{new String(myAddress)};            
            int retval = (Integer) client.execute("handler1.tokenReceived",params);
         } catch (Exception exception) {
            System.err.println("JavaServer: " + exception);
//                    JOptionPane.showMessageDialog(null, "Can not Send Token "+s,"Error", JOptionPane.ERROR_MESSAGE);                    
        }            
    }

    private void delay(int t) {
        if(t < 1) return;
        try {
            Thread.sleep(t);
        } catch (InterruptedException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    
    public void performFunction(int f,int id, String date, String time, String duration, String header, String comment) {
        System.out.println("Perfoming function" + f);
        switch(f){
            case 1: 
                max_id = addRow(date,time,duration,header,comment);  // add row to local database
                updateTable(); // update display                
                break;
            case 2: 
                delRowLocal(id); // delete a row from local database
                updateTable(); // update display
                this.jtfID.setText("");
                break;                
            case 3:
                this.editMyTable(id,date,time,duration,header,comment); // edit table in local host
                updateTable(); // update display                
                break;                
        }     
    }

    private void queueFunc(int i,int id, String date, String time, String duration, String header, String comment) {
        if(funcList.size() > 3) return;
        functionValues v = new functionValues(i,id,date,time,duration,header,comment);
        funcList.add(v);
    }

    private void performQueuedFunc() {
        for(functionValues v: funcList){
            performFunction(v.func,v.id,v.date,v.time,v.duration,v.header,v.comment);
        }
    }    

    private void clearQueuedFunc(){
        funcList.clear();
    }

    public int requestClientSignIn(String address) {
        if(!signInQueue.contains(address))
            signInQueue.add(address);
        if(addressList.size() == 1)
            this.tokenReceived();
        return 0;
    }

    private void performQueuedLogin() {
        if(signInQueue.size() < 1) return;
        for(String s: signInQueue){            
            approveSignIn(s);
        }
        signInQueue.clear();        
    }    
    
    private void approveSignIn(String address) {
        try {
            config.setServerURL(new URL(addHttp(address))); 
            client.setConfig(config);   
            Object[] params = new Object[]{new String(myAddress)};            
            int retval = (Integer) client.execute("handler1.signInApproved",params);
         } catch (Exception exception) {
            System.err.println("JavaServer: " + exception);
//                    JOptionPane.showMessageDialog(null, "Can not Send Token "+s,"Error", JOptionPane.ERROR_MESSAGE);                    
        }            
    }

    private void setWaitToSignOut(boolean b) {
        this.waitingToSignOut = b;
    }

    private boolean isWaitingToSignOut() {
        return this.waitingToSignOut;
    }

    public int getCS() {
        return cs;
    }
    
    private void executeAll(String resourceId, int f,int id, String date, String time, String duration, String header, 
                            String comment){
        this.numRepliesRecived = 0;
        this.resourcesAccessing.add(resourceId);
        this.resourcesWant2Access.remove(resourceId);
        Object[] params = new Object[7];
        try {
            for(String s:addressList){              
                config.setServerURL(new URL(addHttp(s))); 
                client.setConfig(config);   
                try {
                    params[0] = new Integer(f);
                    params[1] = new Integer(id);
                    params[2] = new String(date);
                    params[3] = new String(time);                        
                    params[4] = new String(duration);
                    params[5] = new String(header);                        
                    params[6] = new String(comment);
                    int retval = (Integer) client.execute("handler1.functionsToPerform", params);
                 } catch (Exception exception) {
                    System.err.println("JavaServer: " + exception);                    
                }                     
            }
            this.resourcesAccessing.remove(resourceId);
            this.sendReplyAll(this.myAddress);
            this.resetQueue();
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);
        }
    }
    
    private void distributeFunc() {
        int count = funcList.size();   
        if (count < 1) return;
        Object[] params = new Object[7];
        int i = 0;
        
        try {
            for(String s:addressList){
                if(s.equalsIgnoreCase(myAddress))
                    continue;                
                config.setServerURL(new URL(addHttp(s))); 
                client.setConfig(config);   
                try {
                    for(functionValues v: funcList){
                        params[0] = new Integer(v.func);
                        params[1] = new Integer(v.id);
                        params[2] = new String(v.date);
                        params[3] = new String(v.time);                        
                        params[4] = new String(v.duration);
                        params[5] = new String(v.header);                        
                        params[6] = new String(v.comment);
                       
                        int retval = (Integer) client.execute("handler1.functionsToPerform", params);
                    }
                 } catch (Exception exception) {
                    System.err.println("JavaServer: " + exception);
//                    JOptionPane.showMessageDialog(null, "Function send error"+s,"Error", JOptionPane.ERROR_MESSAGE);                    
                    continue;
                }                     
            }                     
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);
        } 
    }

    public void resetQueue() {
        if(queue.size() < 1) return;
        queue.clear();                
    }
    
    public void updateRAdisplay() {    
        this.jlbLocalClock.setText(""+localClock);
        this.jlbHighestClock.setText(""+highClock);
    }

    private void sendCsRequest(String resourceId) {
        Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, "Sending cs request");
        
        this.localClock ++;
        this.resourcesWant2Access.add(resourceId);
        this.numRepliesReq = this.addressList.size();
        this.numRepliesRecived = 0;
        Object[] params = new Object[3];

        try {
            for(String s:addressList){
                //if(s.equalsIgnoreCase(myAddress))
                //continue;                
                config.setServerURL(new URL(addHttp(s))); 
                client.setConfig(config);   

                params[0] = new String(resourceId);
                params[1] = new String(this.myAddress);
                params[2] = new Integer(this.localClock);
                int retval = (Integer) client.execute("handler1.csRequestReceived", params);                
            }   
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);
        } 
    }

    public void replyReceived(String remoteAddress) {
        System.out.println("Received reply from "+ remoteAddress);
        this.numRepliesRecived++;
        /*
        this.numRepliesRecived++;
        System.out.println(""+this.numRepliesRecived+ " replies received. " + getPort(remoteAddress));
        if(this.numRepliesRecived == this.numRepliesReq){
            performQueuedFunc();
            distributeFunc();
            clearQueuedFunc();     
            updateRAdisplay();    
            
            this.requestCS = false;
            sendReplyAll(myAddress);               
        }
        */
    }

    public void sendReplyAll(String myAddress) {

        Object[] params = new Object[]{new String(myAddress)};
        int count = 0;
        // reply OK to each host in queue
        for(String s:queue){
            if(s.equalsIgnoreCase(myAddress))
                continue;
            try {
                config.setServerURL(new URL(addHttp(s)));
                client.setConfig(config);                    
                int retval = (Integer) client.execute("handler1.replyReceived", params);
                count++;
            } catch (Exception exception) {
                System.err.println("Couldn't sign in: JavaServer: " + exception);
                //                    JOptionPane.showMessageDialog(null, "Can not Sign In to IP "+s,"Sign In Error", JOptionPane.ERROR_MESSAGE);
                continue;
            }
        }
        System.out.println("Reply Sent to " + count + " queued hosts RA");
    }
    
    public void sendReply(String remoteAddress) {

        Object[] params = new Object[]{new String(myAddress)};

            try {
                config.setServerURL(new URL(addHttp(remoteAddress)));
                client.setConfig(config);                    
                int retval = (Integer) client.execute("handler1.replyReceived", params);
            } catch (Exception exception) {
                System.err.println("Couldn't sign in: JavaServer: " + exception);
                // JOptionPane.showMessageDialog(null, "Can not send reply","Reply Error", JOptionPane.ERROR_MESSAGE);
            }
    }    
    
    public void csRequestReceived(String resourceId, String remoteAddress, int remoteClock) {
        this.localClock = Math.max(this.localClock, remoteClock) + 1;
        System.out.println("Received csRequest");
        if(this.resourcesAccessing.contains(resourceId) == false &&
                this.resourcesWant2Access.contains(resourceId) == false){
            System.out.println("not accesing resource "+resourceId+" sending reply");
            this.sendReply(remoteAddress);
        }else if(this.resourcesAccessing.contains(resourceId)){
            System.out.println("currently using resource "+resourceId+" defer");
            this.queue.add(remoteAddress);
        }else if(this.resourcesWant2Access.contains(resourceId)){
            System.out.println("wanto access resource "+resourceId+" too");
            if(this.compareClocks(remoteClock, remoteAddress)){
                this.sendReply(remoteAddress);
            }
            else{
                System.out.println("We should defer request");
                this.queue.add(remoteAddress);
            }
        }
        updateRAdisplay();
    }
    
    private boolean compareClocks(int remoteClock, String remoteAddress){
        if(remoteClock < this.localClock)
            return true;
        else if (remoteClock > this.localClock)
            return false;
        int remAdd = getAdd(remoteAddress);
        int locAdd = getAdd(myAddress);
        if(remAdd < locAdd)
            return true;
        else if(remAdd > locAdd)
            return false;
        
        int remPort = getPort(remoteAddress);
        
        if(remPort < myPort)
            return true;
        else if(remPort > myPort)
            return false;
        return true;
    }

    private int getAdd(String address) {
        
        String addr = address.split("\\:")[0];
        
        int o1 = Integer.parseInt(addr.split("\\.")[0]);
        int o2 = Integer.parseInt(addr.split("\\.")[1]);
        int o3 = Integer.parseInt(addr.split("\\.")[2]);
        int o4 = Integer.parseInt(addr.split("\\.")[3]);        
        
        return o1 * 256*256*256 + o2 *256*256 + o3 * 256 + o4;
    }

    private int getPort(String address) {

        String p = address.split("\\:")[1];
        
        int port = Integer.parseInt(p);
        
        return port;
    }

    private int getAlgorithm() {
        int typ = 0;
        try {
            // get algorithm type
            config.setServerURL(new URL(addHttp(serverAddress)));
            client.setConfig(config);
            Object[] params = new Object[]{new String(myAddress)};
            typ = (int) client.execute("handler1.getAlgorithm", params);
            
        } catch (XmlRpcException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(typ == 0){
            this.jPanelTR.setVisible(true);
            this.jPanelRA.setVisible(false);
            this.jrb1.setSelected(true);
            this.jrb2.setSelected(false);            
        }
        else {
            this.jPanelTR.setVisible(false);
            this.jPanelRA.setVisible(true);
            this.jrb1.setSelected(false);
            this.jrb2.setSelected(true);             
        }

        return typ;        
    }
    
    //#### ######## #### ######## ######## ####    
    public class functionValues{
        int func = 1;
        int id;
        String date;
        String time;
        String duration;
        String header;
        String comment;
        
        public functionValues(int f, int id, String date, String time, String duration, String header, String comment){
            this.func = f;
            this.id = id;
            this.date = date;
            this.time = time;
            this.duration = duration;
            this.header = header;
            this.comment = comment;
        }
    }    
}
